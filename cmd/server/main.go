// @title           Clean Architecture API
// @version         1.0
// @description     This is a sample server for a clean architecture Go project.
// @termsOfService  http://swagger.io/terms/
// @contact.name    API Support
// @contact.email   support@example.com
// @license.name    MIT
// @license.url     https://opensource.org/licenses/MIT
// @host            localhost:8080
// @BasePath        /api/v1
// @schemes         http
//
// @securityDefinitions.basic  BasicAuth
// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization
//
// Code generated by swaggo/swag. DO NOT EDIT.
package main

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	_ "clean-architecture/docs" // This is required for swagger docs
	"clean-architecture/internal/app"
	"clean-architecture/pkg/logger"
)

func main() {
	// Initialize logger
	logger := logger.New()

	// Create application context
	appCtx := app.NewApp(logger)

	// Create HTTP server using configuration
	serverAddr := fmt.Sprintf("%s:%s", appCtx.Config.Server.Host, appCtx.Config.Server.Port)
	server := &http.Server{
		Addr:    serverAddr,
		Handler: appCtx.Router,
	}

	// Start server in a goroutine
	go func() {
		logger.Info("Starting server on " + serverAddr)
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			logger.Fatal("Server error: " + err.Error())
		}
	}()

	// Wait for interrupt signal to gracefully shutdown the server
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	logger.Info("Shutting down server...")

	// Create a deadline for server shutdown
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	// Attempt graceful shutdown
	if err := server.Shutdown(ctx); err != nil {
		logger.Error("Server forced to shutdown: " + err.Error())
	}

	// Shutdown application
	if err := appCtx.Shutdown(ctx); err != nil {
		logger.Error("Application shutdown error: " + err.Error())
	}

	logger.Info("Server exited")
}
