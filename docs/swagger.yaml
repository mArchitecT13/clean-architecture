basePath: /api/v1
definitions:
  handlers.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
  handlers.ErrorResponse:
    properties:
      body:
        description: 'in: body'
        properties:
          message:
            type: string
          status:
            type: string
          timestamp:
            type: string
        type: object
    type: object
  handlers.SuccessResponse:
    properties:
      body:
        description: 'in: body'
        properties:
          message:
            type: string
          status:
            type: string
          timestamp:
            type: string
        type: object
    type: object
  handlers.UpdateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
  handlers.UserResponse:
    properties:
      body:
        description: 'in: body'
        properties:
          data: {}
          message:
            type: string
          status:
            type: string
          timestamp:
            type: string
        type: object
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
  description: This is a sample server for a clean architecture Go project.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Clean Architecture API
  version: "1.0"
paths:
  /api/v1/users:
    get:
      description: Get a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.UserResponse'
            type: array
      summary: List all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with email and name
      parameters:
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /api/v1/users/{id}:
    delete:
      description: Delete a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete a user
      tags:
      - users
    get:
      description: Get a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user's information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update a user
      tags:
      - users
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
swagger: "2.0"
